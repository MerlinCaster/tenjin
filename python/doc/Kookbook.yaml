preparation: |

	function to_strong($str) {
	    $str = preg_replace('/\{\{\*/', '<strong>', $str);
	    $str = preg_replace('/\*\}\}/', '</strong>', $str);
	    return $str;
	}

	function to_unstrong($str) {
	    $str = preg_replace('/\{\{\*/', '', $str);
	    $str = preg_replace('/\*\}\}/', '', $str);
	    return $str;
	}

	function pre_to_console($str) {
	    $str = preg_replace('/<pre class="literal-block">\n\$/',
	                        "<pre class=\"console\">\n$", $str);
	    return $str;
	}

	function pre_to_file($str) {
	    $str = preg_replace('/<pre class="literal-block">\n/',
	                        "<pre class=\"file\">\n", $str);
	    return $str;
	}



properties:
  - tagfile:	html-css


parameters:
  #- dir:  data
  - testdir:  ../test
  - dir:        $(testdir)/data
  #- title:	Tenjin Users' Guide
  #- stylesheet: html4css1.css
  - stylesheet: users-guide.css
  #- rstdir:	/Library/Frameworks/Python.framework/Versions/2.4/bin
  #- rst2html:	$(rstdir)/rst2html.py
  #- rst2html_opts:  --link-stylesheet --no-xml-declaration --no-source-link --no-toc-backlinks --language=en --stylesheet="$(stylesheet)" --title="$(title)"
  # --strip-comments
  - tidy_opts:      -q -i -wrap 9999 --hide-comments yes
 
  #- users_guide_eruby:	users-guide.eruby
  - original_docdir:    ../../../rbtenjin/trunk/doc
  - users_guide_eruby:	$(original_docdir)/users-guide.eruby
  - faq_eruby:	        $(original_docdir)/faq.eruby
  - examples_eruby:     $(original_docdir)/examples.eruby
  - kook_product:   :all
  - testfiles:		[ test_users_guide.py, test_faq.py ]

  - basenames:	  [ users-guide, faq, examples ]
  - textfiles*:	  kook_array_suffix($basenames, '.txt')
  - htmlfiles*:   kook_array_suffix($basenames, '.html');


recipes:

  - product:	:all
    ingreds:	[ :doc, :test ]

  - product:	:doc
    desc:	generate *.html
    ingreds:	[ $(htmlfiles) ]

#  - product:	users-guide.html
#    ingreds:	[ users-guide.txt, :retrieve ]
#    byprods:	[ users-guide.toc.html ]
#    method*: |
#	k_sys("kwaser -t $tagfile -T $ingred > $byprod");
#	k_sys("kwaser -t $tagfile    $ingred > $product");
#	k_delete($byprods);

#  - product:	users-guide.html
#    ingreds:	[ users-guide.rst ]
#    byprods:	[ users-guide.tmp ]
#    method*: |
#	k_sys_f("$(rst2html) $rst2html_opts $ingred 2>&1 > $byprod");
#	$str = file_get_contents($byprod);
#	$str = to_strong($str);
#	$str = pre_to_console($str);
#	$str = pre_to_file($str);
#	file_put_contents($byprod, $str);
#	k_sys_f("tidy $(tidy_opts) $byprod > $product");
#	//k_remove($byprod);

  - product:	*.html
    ingreds:	[ $(1).txt ]
    byprods:	[ $(1).toc.html ]
    method*: |
	k_sys("kwaser -t html-css -T $ingred > $byprod");
	k_sys("kwaser -t html-css    $ingred > $product");

  - product:	*.txt
    desc:	create *.txt from *.eruby and retrieve testdata from *.txt
    ingreds:	[ $(1).eruby ]
    toppings:	[ $(original_docdir)/$(1).eruby ]
    method*: |
	if (file_exists($topping))
	    k_copy($topping, $ingred);
	k_sys("erubis -E PercentLine -c '@lang=%q|python|' -p '\\[% %\\]' $ingred > $product");
	#
	$name = strtr('$(1)', '-', '_');
	$datadir = "$(testdir)/data/$name";
	if (is_dir($datadir))
	    k_delete("$datadir/*");
	else
	    k_mkdir("$datadir");
	k_sys("retrieve -Fd $datadir $product");
	#if (! file_exists('data'))
	#    k_sys("ln -s ../test/data .");
	$filenames = glob("$datadir/*.result2");
	foreach ($filenames as $filename) {
	    $content = file_get_contents($filename);
	    unlink($filename);
	    $contents = preg_split('/^\$ /m', $content);
	    $i = 0;
	    foreach ($contents as $content) {
	        if (! $content) continue;
	        $i++;
	        $fname = preg_replace('/\.result2$/', "$i.result",  $filename);
		$content = '$ '. $content;
		file_put_contents($fname, $content);
	    }
	}

  - product:	:create_test
    desc:       create test script
    ingreds:	[ $(testdir)/test_users_guide.py,
                  $(testdir)/test_faq.py,
		  $(testdir)/test_examples.py ]

  - product:	:clean
    method*: |
	k_delete('*.toc.html', 'test.log', '*.pyc');

  - product:	:test
    ingreds:	[ :test_users_guide, :test_faq, :test_examples ]

  - product:	:test_users_guide
    ingreds:	[ $(testdir)/test_users_guide.py, users-guide.txt ]
    method*: &testmethod |
	$name = preg_replace('/^:test_/', '', $product);
	$cwd = k_chdir("$(testdir)");
	k_sys("python $ingred");
	k_backdir($cwd);

  - product:	:test_faq
    ingreds:	[ $(testdir)/test_faq.py, faq.txt ]
    method*: *testmethod

  - product:	:test_examples
    ingreds:	[ $(testdir)/test_examples.py, examples.txt ]
    method*: *testmethod

#  - product:	$(testdir)/test_users_guide.py
#    ingreds:	[ $(testdir)/test_users-guide.py ]
#    method*: |
#	k_rename($ingred, $product);
#	#k_rename("data/users-guide", "data/users_guide");

  - product:	$(testdir)/test_*.py
    method*: |
        ## base name
        #$base = '$(1)';
	preg_match('/test_(.*)\.py$/', $product, $m);
	$base = $m[1];
	$name = strtr($base, '-', '_');
	## class name
        $s = strtr($base, '_-', '  ');     # 'foo-bar-baz' => 'foo bar baz'
	$s = ucwords($s);                  # 'foo bar baz' => 'Foo Bar Baz'
	$s = preg_replace('/\s/', '', $s); # 'Foo Bar Baz' => 'FooBarBaz'
        $classname = $s . 'Test';
	## generate test script
	$buf = array();
	$buf[] = <<<HEADER
	#
	# auto generated
	#
	
	import unittest, os, re
	from test import test_support

	from testcase_helper import *
	
	class ${classname}(unittest.TestCase, TestCaseHelper):

	    basedir = '$(dir)/${name}'
	    DIR = (os.path.dirname(__file__) or '.') + '/' + basedir
	    CWD = os.getcwd()
	
	    def setUp(self):
	        os.chdir(self.__class__.DIR)
	
	    def tearDown(self):
	        os.chdir(self.__class__.CWD)
	
	    def _test(self):
	        filename = self.filename;
		dirname = os.path.dirname(filename)
		pwd = os.getcwd()
		if dirname:
		    os.chdir(dirname)
		    filename = os.path.basename(filename)
		s = open(filename).read()
		pat = r'\\A\\$ (.*?)\\n'
		m = re.match(pat, s)
		command = m.group(1)
		expected = re.sub(pat, '', s)
	        result = os.popen(command).read()
	        self.assertTextEqual(expected, result)

	HEADER;

	$buf[] = <<<BODY
	
	    from glob import glob
	    import os
	    filenames = []
	    filenames.extend(glob('%s/*.result' % basedir))
	    filenames.extend(glob('%s/*/*.result' % basedir))
	    filenames.extend(glob('%s/*.source' % basedir))
	    filenames.extend(glob('%s/*/*.source' % basedir))
	    for filename in filenames:
	        #name = os.path.basename(filename).replace('.result', '')
		name = filename.replace(basedir+'/', '')
		s = "\\n".join((\
		     "def test_%s(self):" % re.sub('[^\w]', '_', name),
		     "    self.filename = '%s'" % name,
		     "    self._test()",
		     ))
		exec s
	
	BODY;

	#$files = glob("$datadir/*.result");
	#foreach ($files as $file) {
	#    $name = preg_replace('/\.result$/', '', basename($file));
	#    $buf[] = <<<BODY
	#
	#    def test_$name(self):
	#        self.name = '$name';
	#        self._test()
	#
	#BODY;
	#}

	$buf[] = <<<FOOTER

	def test_main():
	    test_support.run_unittest(${classname})
	
	if __name__ == '__main__':
	    test_main()

	FOOTER;

	$s = join($buf);
	file_put_contents($product, $s);
	k_echo("** '$product' created.\n");
	#k_copy($product, "../test/$product");
