.######################################################################
.$ ANN: pyTenjin 1.1.0 - a high-speed and full-featured template engine

I released pyTenjin 1.1.0.
http://pypi.python.org/pypi/Tenjin/
http://www.kuwata-lab.com/tenjin/


Overview of pyTenjin
--------------------

* Very fast: about 10 times faster than Django template engine
* Easy to learn: no need to learn template-original language
* Full-featured: nestable layout template, partial template, preprocessing, etc.
* Lightweight: only 2000 lines of code and very fast to import.
* Google App Engine supported


Documents
---------

* User's Guide
  http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html
* Examples
  http://www.kuwata-lab.com/tenjin/pytenjin-examples.html
* CHANGES
  http://www.kuwata-lab.com/tenjin/pytenjin-CHANGES.txt


Install
-------

    $ sudo easy_install Tenjin

Or:

    $ wget http://pypi.python.org/packages/source/T/Tenjin/Tenjin-1.1.0.tar.gz
    $ tar xzf Tenjin-1.1.0.tar.gz
    $ cd Tenjin-1.1.0/
    $ sudo python setup.py install


Example
-------

    ## views/example.pyhtml
    <?py #@ARGS title, items ?>
    <h2>${title}</h2>
    <table>
      <?py cycle = new_cycle('odd', 'even') ?>
      <?py for item in items: ?>
      <tr class="${cycle()}">
        <td>${item}</td>
      </tr>
      <?py #endfor ?>
    </table>

    ## main.py
    import tenjin
    #tenjin.set_template_encoding('utf-8')  # optional (default 'utf-8')
    from tenjin.helpers import *
    from tenjin.html import *
    engine = tenjin.Engine(path=['views'])
    context = {'title': 'Example', 'items': ['Haruhi', 'Mikuru', 'Yuki'] }
    output = engine.render('example.pyhtml', context)
    print(output)

    ## output
    $ python main.py
    <h2>Example</h2>
    <table>
      <tr class="odd">
        <td>Haruhi</td>
      </tr>
      <tr class="even">
        <td>Mikuru</td>
      </tr>
      <tr class="odd">
        <td>Yuki</td>
      </tr>
    </table>


Enhancements and Changes in this release
----------------------------------------

(See http://www.kuwata-lab.com/tenjin/pytenjin-CHANGES.txt for details.)

* [Change] !! IMPORTANT!! Default cache file format is changed from
  marshal format to text format.
  You should remove all cache files to use this release.

* [Enhance] Embedded pattern '${}' and '#{}' can contain pair of '{' and '}'. ::

      <p>${foo({'x':1})}</p>          # OK
      <p>${foo({}+{}+{})}</p>         # OK
      <p>${foo({'x':{'y':1}})}</p>    # NG

* [Enhance] New preprocessing mechanism. You can specify your own preprocessor
  class by 'pp' parameter.

* [Enhance] Add 'TrimPreprocessor' which removes spaces ad the beginning of lines.
  You can reduce size of output by it.

* [Enhance] Add 'PrefixedLinePreprocessor' which converts ':: ...' into '<?py ... ?>'.
  You may like ':: ...' because it is simpler than '<?py ... ?>'.

* [Enhance] Add 'JavaScriptPreprocessor' class which enables you to embed
  client-side javascript template code into server-side template.

  For example::

      <div id="placeholder">
        <!-- #JS: render_table(items) -->
        <table>
          <?js for (var i = 0, n = items.length; i < n; i++) { ?>
          <tr>
            <td>#{i}</td>
            <td>${items[i]}</td>
          </tr>
          <?js } ?>
        </table>
        <!-- #/JS -->
      </div>
      <script>#{tenjin.JS_FUNC}</script>
      <script>
        var html = render_table(["Haruhi", "Mikuru", "Yuki"]);
        document.getElementById('placehodler').innerHTML = html;
      </script>

  will be converted into::

      <div id="placeholder">
        <script>function render_table(items){var _buf='';
      _buf+='  <table>\n';
           for (var i = 0, n = items.length; i < n; i++) {
      _buf+='    <tr>\n\
            <td>'+_S(i)+'</td>\n\
            <td>'+_E(items[i])+'</td>\n\
          </tr>\n';
           }
      _buf+='  </table>\n';
        return _buf;};</script>
      </div>
      <script>#{tenjin.JS_FUNC}</script>
      <script>
        var html = render_table(["Haruhi", "Mikuru", "Yuki"]);
        document.getElementById('placehodler').innerHTML = html;
      </script>

  by JavaScriptPreprocessor.
  Notice that you should embed 'tenjin.JS_FUNC' to run client-side code.

  How to use it::

      pp = [ tenjin.JavaScriptPreprocessor() ]
      engine = tenjin.Engine(pp=pp)
      output = engine.render('example.pyhtml', {})
      print(html)

* [Enhance] Now supports Jython 2.5.2. (thanks to Lars Hupfeldt Nielsen)

* [Enhance] Now supports PyPy 1.7 or later officially.

* [Change] Template#convert() now converts "\r\n" into "\\r\n".
  This is necessary to follow change of language specification on
  Python 2.7 and 3.2.


Have fun!
--
makoto kuwata



.######################################################################
.$ ANN: pyTenjin 1.0.0 - a high-speed and full-featured template engine

I released pyTenjin 1.0.0.
http://pypi.python.org/pypi/Tenjin/
http://www.kuwata-lab.com/tenjin/

This release contains a lot of enhancements and changes.


Overview
--------

* Very fast: about 10 times faster than Django template engine
* Easy to learn: no need to learn template-original language
* Full-featured: nestable layout template, partial template, preprocessing, etc.
* Lightweight: only 2000 lines of code and very fast to import.
* Google App Engine supported


Documents
---------

* User's Guide
  http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html
* Examples
  http://www.kuwata-lab.com/tenjin/pytenjin-examples.html
* CHANGES
  http://www.kuwata-lab.com/tenjin/pytenjin-CHANGES.txt


Install
-------

    $ sudo easy_install Tenjin

Or:

    $ wget http://pypi.python.org/packages/source/T/Tenjin/Tenjin-1.0.0.tar.gz
    $ tar xzf Tenjin-1.0.0.tar.gz
    $ cd Tenjin-1.0.0/
    $ sudo python setup.py install


Example
-------

    ## views/example.pyhtml
    <?py #@ARGS title, items ?>
    <h2>${title}</h2>
    <table>
      <?py cycle = new_cycle('odd', 'even') ?>
      <?py for item in items: ?>
      <tr class="${cycle()}">
        <td>${item}</td>
      </tr>
      <?py #endfor ?>
    </table>

    ## main.py
    import tenjin
    #tenjin.set_template_encoding('utf-8')  # optional (default 'utf-8')
    from tenjin.helpers import *
    from tenjin.html import *
    engine = tenjin.Engine(path=['views'])
    context = {'title': 'Example', 'items': ['Haruhi', 'Mikuru', 'Yuki'] }
    output = engine.render('example.pyhtml', context)
    print(output)

    ## output
    $ python main.py
    <h2>Example</h2>
    <table>
      <tr class="odd">
        <td>Haruhi</td>
      </tr>
      <tr class="even">
        <td>Mikuru</td>
      </tr>
      <tr class="odd">
        <td>Yuki</td>
      </tr>
    </table>

	
Enhancements
------------

* (IMPORTANT!!) Performance is improved (about 5 percent).
  To improve performance, compiled Python code is changed.
  This means that YOU MUST TOUCH ALL TEMPLATE FILES AND UPDATE TIME STAMPS
  OF THEM in order to clear cache data before using this release.

    ## touch all template files to clear cache data
    $ find . -name '*.pyhtml' | xargs touch
    ## show compiled python code
    $ cat ex.pyhtml
    <ul>
    <?py for item in items: ?>
      <li>${item}</li>
    <?py #endfor ?>
    <?ul>
    $ pytenjin -sb ex.pyhtml
    _extend=_buf.extend;_to_str=to_str;_escape=escape; _extend(('''<ul>\n''', ));
    for item in items:
        _extend(('''  <li>''', _escape(_to_str(item)), '''</li>\n''', ));
    #endfor
    _extend(('''<?ul>\n''', ));

* (IMPORTANT!!) Free-indent style supported. Now there is no limitation
  about indent.

    ## In the previous version, there is strong restriction about indent.
    <html>
      <body>
        <table>
    <?py for item in items: ?>
          <tr>
            <td>${item}</td>
          </tr>
    <?py #endfor ?>
        </table>
      </body>
    </html>

    ## In this release, you can place statements freely.
    <html>
      <body>
        <table>
          <?py for item in items: ?>
          <tr>
            <td>${item}</td>
          </tr>
          <?py #endfor ?>
        </table>
      </body>
    </html>

* (IMPORTANT!!) SafeTemplate and SafeEngine classes are now provided.
  These classes support autoescaping similar to Django or Jinja2.
  See
    http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html#auto-escaping
  for details.

* (IMPORTANT!!) New function 'tenjin.set_template_encoding()' is provided.
  If you prefer templates to be unicode-base like Django or Jinja2,
  call it before importing helpers.

     ## change Tenjin to be unicode-based
     import tenjin
     tenjin.set_template_encoding('utf-8')  # call before importing helpers
     from tenjin.helpers import *
     ## The above is same as:
     #import tenjin
     #Template.encoding = 'utf-8'
     #tenjin.helpers.to_str = tenjin.helpers.generate_tostrfunc(decode='utf-8')
     #from tenjin.helpers import *

  Notice that you should NOT write '<?py # coding: utf-8 ?>' into template
  files if you call tenjin.set_template_encoding(). If you wrote it,
  SyntaxError exception would be raised.

* (IMPORTANT!!) New helper function 'cache_as()' is available for fragment cache.
  This replaces 'not_cached()' and 'echo_cached()'.

     ## previous (obsolete)
     <?py if not_cached('cachekey1', 60): ?>
       ...
     <?py #endif ?>
     <?py echo_cached() ?>

     ## using new helper
     <?py for _ in cache_as('cachekey1', 60): ?>
       ...
     <?py #endfor ?>

  'not_cached()' and 'echo_cached()' are still available but not recommended.

* (IMPORTANT!!) New helper 'capture_as()' is available for capturing template.
  This replaces 'start_capture()' and 'stop_capture()'.

     ## preivous (obsolete)
     <?py start_capture('name') ?>
       ....
     <?py stop_capture() ?>

     ## using new helper
     <?py with capture_as('name'): ?>
       ....
     <?py #endfor ?>

  'start_capture()' and 'stop_capture()' are still available but not recommended.

  New helper 'capture_as()' allows you to nest capturing which is
  impossible with 'start_capture()' and 'stop_capture()'.

* If 'trace=True' is passed to Template class (or Engine class), output
  string will contain template file name. For example:

     <!-- ***** begin: hello.pyhtml ***** -->
     <div class="content">
       <p>Hello World!</p>
     </div>
     <!-- ***** end: hello.pyhtml ***** -->

* tenjin.Engine now helps M17N of templates. If you pass 'lang' option to
  Engine, it will generates cache files for each langs from a file.
  This feature is intened to use with preprocessing in order to reduce
  catalog expantion cost (such as '${_("Hello")}')

      ## for lang='en'
      engine_en = tenjin.Engine(lang='en', preprocess=True)
      engine_en.render('index.pyhtml')  # generates 'index.pyhtml.en.cache'
      ## for lang='fr'
      engine_fr = tenjin.Engine(lang='fr', preprocess=True)
      engine_fr.render('index.pyhtml')  # generates 'index.pyhtml.fr.cache'

* (Experimental) New html helper 'js_link()'.

      >>> from tenjin.html import *
      >>> js_link('click', 'alert("OK")', klass='link')
      '<a href="javascript:undefined" onclick="alert(&quot;OK&quot;);return false" class="link">click</a>'


Changes
-------

* (IMPORTANT!!) You must close statement block of 'if', 'for', 'with', ...
  with corresponding '#endif', '#endfor', '#endwith', and so on.
  Notice that '#end' is available as almighty closer.

* (IMPORTANT!!) tenjin.GaeMemcacheCacheStorage is removed (this is already
  announced in the previous release).
  Please use tenjin.gae.GaeMemcacheStorage instead.

* 'tenjin.helpers.html' module is renamed to 'tenjin.html', but old module
  name is still available for backward compatibility.

* escape_html() (and escape()) now escapes "'" into "&#39;".

* new_cycle() is moved from tenjin.helpers.html module to tenjin.helpers
  module because it is not only for HTML.

* In GAE environment, Tenjin uses '1.1' as dummy value of CURRENT_VERSION_ID
  when it is not provided. This prevents error when using GAE and tenjin
  on test environment.

* Python 2.3 is now unsupported. (Python 2.4 is still supported because
  CentOS uses Python 2.4).

* (internal) Tenjin.escape_expr_and_escapeflag() is changed to
  Tenjin.escape_expr_and_flags().

* (internal) Tenjin.add_expr() is changed to take 'flags' argument.

* (internal) 'tenjin.__release__' is renamed to 'tenjin.__version__'.


Bugfixes
--------

* Cache file saving was failed on Windows because existing file should be
  removed before renaming file. (patched by elishowk, thank you!)


Thank you.
--
regards,
makoto kuwata


.######################################################################
.$ ANN: pyTenjin 1.0.0 - a high-speed and full-featured template engine

Hi,

I released pyTenjin 1.0.0.
http://pypi.python.org/pypi/Tenjin/
http://www.kuwata-lab.com/tenjin/

This release contains a lot of enhancements and changes.


Overview
--------

  * Very fast: about 10 times faster than Django template engine
  * Easy to learn: no need to learn template-original language
  * Full-featured: nestable layout template, partial template, preprocessing, etc.
  * Lightweight: only 2000 lines of code and very fast to import.
  * Google App Engine supported


Documents
---------

  * User's Guide
      http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html
  * Examples
      http://www.kuwata-lab.com/tenjin/pytenjin-examples.html
  * CHANGES
      http://www.kuwata-lab.com/tenjin/pytenjin-CHANGES.txt


Install
-------

    $ sudo easy_install Tenjin

Or:

    $ wget http://pypi.python.org/packages/source/T/Tenjin/Tenjin-1.0.0.tar.gz
    $ tar xzf Tenjin-1.0.0.tar.gz
    $ cd Tenjin-1.0.0/
    $ sudo python setup.py install


Enhancements
------------

See CHANGES.txt for details.

  * (IMPORTANT!!) Performance is improved (about 5 percent).
  * (IMPORTANT!!) Free-indent style supported.
  * (IMPORTANT!!) SafeTemplate and SafeEngine classes are now provided.
    http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html#auto-escaping
  * (IMPORTANT!!) New function 'tenjin.set_template_encoding()' is provided.
  * (IMPORTANT!!) New helper function 'cache_as()' is available for fragment cache.
  * (IMPORTANT!!) New helper function 'cache_as()' is available for fragment cache.
  * New 'trace' option to trace what template is rendered.
  * New 'lang' option to support M17N templates.
  * (Experimental) New html helper 'js_link()'.


Changes
-------

See CHANGES.txt for details.

  * (IMPORTANT!!) You must close statement block of 'if', 'for', 'with', ...
    with corresponding '#endif', '#endfor', '#endwith', and so on.
  * (IMPORTANT!!) tenjin.GaeMemcacheCacheStorage is removed.
  * 'tenjin.helpers.html' module is renamed to 'tenjin.html'.
  * escape_html() (and escape()) now escapes "'" into "&#39;".
  * new_cycle() is moved from tenjin.helpers.html module to tenjin.helpers.
  * Uses '1.1' as dummy value of CURRENT_VERSION_ID in GAE environment.
  * Python 2.3 is now unsupported. Please use Python 2.4+ or 3.0+.
  * (internal) Tenjin.escape_expr_and_escapeflag() is changed to
    Tenjin.escape_expr_and_flags().
  * (internal) Tenjin.add_expr() is changed to take 'flags' argument.
  * (internal) 'tenjin.__release__' is renamed to 'tenjin.__version__'.


Bugfixes
--------

  * Cache file saving was failed on Windows because existing file should be
    removed before renaming file. (patched by elishowk, thank you!)


--
regards,
makoto kuwata

.######################################################################
.$ ANN: pyTenjin 0.9.0 - very fast and full-featured template engine

I released pyTenjin 0.9.0
http://www.kuwata-lab.com/tenjin/
http://pypi.python.org/pypi/Tenjin/

This release contains a lot of enhancements and changes.
Also you should read planned changes in the next release (1.0.0).
See
  http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html#planned-changes
for details.


Overview
--------

pyTenjin is very fast and full-featured template engine for Python.

  * Very fast (about 10 times faster than Django template engine)
  * Easy to learn (no need to learn template-original language)
  * Full-featured (nestable layout template, partial template, preprocessing, ...)
  * Google App Engine supported


Documents
---------

  * User's Guide
      http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html
  * Examples
      http://www.kuwata-lab.com/tenjin/pytenjin-examples.html
  * CHANGES
      http://www.kuwata-lab.com/tenjin/pytenjin-CHANGES.txt


Enhancements from 0.8.1
-----------------------

  * Performance improved (about 5%).

  * (IMPORTANT!!)
    Fragment cache supported.
    See
      http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html#fragment-cache
    for details.

  * (IMPORTANT!!)
    include() now takes keyword arguments as local variables.
    ex.
      <?py include('header.pyhtml', title='Example') ?>

  * Add new module 'tenjin.gae'.

  * Add 'input' argument to tenjin.Template() to create template object without file.
    ex.
      input = "<p>Hello ${name}</p>"
      t = tenjin.Template(None, input=input)
      html = t.render({'name': 'World'})

  * Add tenjin.Engine.add_template() to add template object explicitly.

  * User's guide (doc/users-guide.html) is rewrited entirely.

  * Add benchmark for Jinja2.


Changes from 0.8.1
------------------

  * (IMPORTANT!!)
    It is strongly recommended to close 'if', 'for', 'while', ... by
    corresponding '#endif', '#endfor', '#endwhile', and so on.
    See
      http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html#planned-changes
    for details.

  * (IMPORTANT!!)
    Google App Engine support is changed. All you have to do is to call
    tenjin.gae.init() at first.
    See
      http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html#google-appengine
    for details.

  * (IMPORTANT!!)
    tenjin.Engine is changed to share a cache storage between engines by default.
    This improves performance of Tenjin but your test scripts may get errors.
    If you get errors in your test scripts, clear cache storage for each test.

        def setUp(self):
	    tenjin.Engine.cache.clear()

    If you prefer previous behaviour, set tenjin.Engine.cache to None.

        ## create new MarshalCacheStorage object for each engine
        tenjin.Engine.cache = None
    
  * Now you can set default template class to tenjin.Engine.templateclass.
    ex.
      tenjin.Engine.templateclass = MyTemplate

  * 'cache' argument of tenjin.Engine() is changed.
     [old behaviour] if 'cache' is None, cache template object into memory.
     [new behaviour] if 'cache' is None, use default cache storage.

  * Default preamble is changed from "print ''.join(_buf)" to
    "print(''.join(_buf))".

  * 'doc/faq.html' is integrated into 'doc/users-guide.html'.

  * All test scripts are changed to import oktest instead of unittest.


Bug fixes
---------

  * Fixed to set correct file path of template object which is loaded from cache.

  * Fixed a bug that 'pytenjin -sbN' didn't trim line number on the last line


.######################################################################
.$ ANN: pyTenjin 0.8.1 - much faster template engine than Django

I released pyTenjin 0.8.1.
http://www.kuwata-lab.com/tenjin/
http://pypi.python.org/pypi/Tenjin/

pyTenjin is the fastest template engine for Python.

* Very fast (about 10 times faster than Django template engine)
* Easy to learn (no need to learn template-original language)
* Full-featured (layout template, partial template, preprocessing, ...)
* Very small (only 1,200 lines, one file)

This is a bug fix release.
See CHANGES for details.
  http://www.kuwata-lab.com/tenjin/pytenjin-CHANGES.txt


Bugfix from 0.8.1
-----------------

  * Fix bugs on CacheStorage#unset(). (thanks Steve)

  * Fix tenjin.helpers.html.new_cycle() to work on Python 3.0.


Changes from 0.8.1
------------------

  * Update 'doc/faq.html' and add new section.
    'Is it possible to change indent restriction more flexible?'
    http://www.kuwata-lab.com/tenjin/pytenjin-faq.html#faq-flexibleindent


Documents
---------

  * User's Guide
      http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html
  * FAQ
      http://www.kuwata-lab.com/tenjin/pytenjin-faq.html
  * CHANGES
      http://www.kuwata-lab.com/tenjin/pytenjin-CHANGES.txt


.######################################################################
.$ ANN: pyTenjin 0.8.0 - much faster template engine than Django

I have released pyTenjin 0.8.0
http://www.kuwata-lab.com/tenjin/

In this release, I included some ideas that Steve suggested.
Thank you very much, Steve.


Changes from 0.7.0
------------------

  * !!IMPORTANT!!
    HTML helper function 'tagattr()' is renamed to 'tagattrs()'.
    (Notice that new 'tagattr()' is added. See below.)

  * 'tagattrs()' is changed to add ' ' (space) at the first character.
    ex.
      (0.7.0)  tagattr(klass='error')     #=> 'class="error"'
      (0.7.1)  tagattrs(klass='error')    #=> ' class="error"'

  * 'tagattrs()' is changed to handle 'checked', 'selected', and
    'disabled' attributes.
    ex.
       >>> from tenjin.helpers.html import *
       >>> tagattrs(checked=True, selected='Y', disabled=1)
       ' checked="checked" selected="selected" disabled="disabled"'
       >>> tagattrs(checked=False, selected='', disabled=0)
       ''


Bugfix
------

  * !!IMPORTANT!!
    Template caching is changed to keep template file's timestamp
    instead of create time of cached object. See
    http://groups.google.com/group/kuwata-lab-products/browse_thread/thread/a0d447c282fb383d#msg_de39557405c9b656
    for details. (Thanks Steve)


Enhancements
------------

  * Add new HTML helper function 'tagattr()'.
    (Notice that 'tagattr()' in 0.7.0 is renamed into 'tagattrs()'.)
    ex.
      >>> from tenjin.helpers.html import *
      >>> tagattr('size', 20)
      ' size="20"'
      >>> tagattr('size', 0)
      ''
      >>> tagattr('size', 20, 'large')
      ' size="large"'
      >>> size = 20        # you can use tagattrs() instead of tagattr()
      >>> tagattrs(size=(size and 'large'))
      ' size="large"'

  * Add new HTML helper function 'new_cycle()'.
    ex.
      >>> from tenjin.helpers.html import *
      >>> cycle = new_cycle('odd, 'even')
      >>> cycle()
      'odd'
      >>> cycle()
      'even'
      >>> cycle()
      'odd'
      >>> cycle()
      'even'

  * (experimental) Template converter is changed to add dummy if-statement
    when first Python statement is indented. (Thanks Steve)
    ex.
      $ cat ex.pyhtml
      <html>
        <body>
          <ul>
            <?py for item in items: ?>
            <li>${item}</li>
            <?py #end ?>
          </ul>
        </body>
      </html>
      $ pytenjin -sb ex.pyhtml
      _buf.extend(('''<html>
        <body>
          <ul>\n''', ));
      if True: ## dummy
            for item in items:
                _buf.extend(('''      <li>''', escape(to_str(item)), '''</li>\n''', ));
            #end
            _buf.extend(('''    </ul>
        </body>
      </html>\n''', ));

  * Update User's Guide and FAQ.


Have fun!

--
regards,
makoto kuwata


.######################################################################
.$ ANN: pyTenjin 0.7.0 - much faster template engine than Django

Please give me a chance to introduce my work.

I have released pyTenjin 0.7.0
http://www.kuwata-lab.com/tenjin/

pyTenjin is the fastest template engine for Python.

* Very fast (about 10 times faster than Django template engine)
* Easy to learn (no need to learn template-original language)
* Full-featured (layout template, partial template, preprocessing, ...)
* Very small (only 1,200 lines, one file)

And Goole AppEngine is now supported in this release.
You can use pyTenjin on Google AppEngine instead of Django template.
See
 http://www.kuwata-lab.com/tenjin/pytenjin-faq.html#faq-google-appengine
for details.


Enhancements and Changes on 0.7.0
---------------------------------

There are many enhancements and changes on 0.7.0.  See
 http://www.kuwata-lab.com/tenjin/pytenjin-CHANGES.txt
for details.


Download and Install
--------------------

  $ wget http://downloads.sourceforge.net/tenjin/Tenjin-0.7.0.tar.gz
  $ tar xzf Tenjin-0.7.0.tar.gz
  $ cd Tenjin-0.7.0
  $ sudo python setup.py install


Documents and Materials
-----------------------

* User's Guide
  http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html

* FAQ
  http://www.kuwata-lab.com/tenjin/pytenjin-faq.html

* Examples
  http://www.kuwata-lab.com/tenjin/pytenjin-examples.html

* (Presentation) Tenjin - the fastest template engine in the world
  http://www.slideshare.net/kwatch/tenjin-the-wastest-template-engine-in-the-world


Have fun!

--
regards,
makoto kuwata


.######################################################################
.$ [ANN] pyTenjin 0.7.0 - the fastest and full-featured template engine

Hi,

I have released pyTenjin 0.7.0
http://www.kuwata-lab.com/tenjin/

pyTenjin is the fastest template engine for Python.
It is not only very fast but also full-featured and easy-to-use.
You can embed Python statements and expressions into your text file.
Tenjin converts it into Python program and evaluate it.

Features:
* very fast
  - x2 faster than Mako
  - x3 faster than Cheetah and Myghty
  - x9 faster than Django
  - x60 faster than Kid
* Full-featured
  - layout template
  - partial template
  - capturing
  - preprocessing
  - and so on...

You can see the detail of benchmark at:
http://www.kuwata-lab.com/tenjin/
(benchmark script is included in pyTenjin distribution.)


Enhancements in 0.7.0
---------------------

* Python 3.0 is now supported officially.
* Google AppEngine (GAE) supported.
  http://www.kuwata-lab.com/tenjin/pytenjin-faq.html#faq-google-appengine
* Logging support.
* enerate_tostrfun() can take not only encode-encoding but also
  decode-encoding.
* (Experimental) HTML helper functions are now provided.
* New command-line option '-a cache' supported.
* You can share caches between all engine objects.
* Pickle-base and text-base template caching support.

See CHANGES.txt for details.
  http://www.kuwata-lab.com/pytenjin-CHANGES.txt


Changes in 0.7.0
----------------

* 'cache' option for tenjin.Engine() changed.
* to_str() is changed to encode unicode object into binary(=str)
    using utf-8 encoding in default.
* Benchmark script now skips to do benchmark template libraries
  which are failed to import.


Bugfix in 0.7.0
----------------
* In preprocessing, error was raised when expression is not string.
  Now fixed.


Download and Install
--------------------

Type:

  $ sudo eazy_install Tenjin

Or:

  $ wget http://downloads.sourceforge.net/tenjin/Tenjin-0.7.0.tar.gz
  $ tar xzf Tenjin-0.7.0.tar.gz
  $ cd Tenjin-0.7.0
  $ sudo python setup.py install


Documents
---------

* User's Guide
  http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html

* FAQ
  http://www.kuwata-lab.com/tenjin/pytenjin-faq.html

* Examples
  http://www.kuwata-lab.com/tenjin/pytenjin-examples.html

* (Presentation) Tenjin - the fastest template engine in the world
  http://www.slideshare.net/kwatch/tenjin-the-wastest-template-engine-in-the-world



Have fun!

--
regards,
makoto kuwata


.######################################################################
.$ [ANN] pyTenjin 0.6.2 - a fast and full-featured template engine

I have released pyTenjin 0.6.2.
http://www.kuwata-lab.com/tenjin/
This is a tiny bug fix release.

pyTenjin is the fastest template engine for Python.
Not only very fast, but also full-featured and easy-to-use is pyTenjin.
You can embed Python statements and expressions into your text file.
Tenjin converts it into Python program and evaluate it.

Features:
* very fast
  - x2 faster than Mako
  - x3 faster than Cheetah and Myghty
  - x9 faster than Django
  - x60 faster than Kid
* Full-featured
  - layout template
  - partial template
  - capturing
  - preprocessing
  - and so on...

You can see the detail of benchmark at:
http://www.kuwata-lab.com/tenjin/
(benchmark script is included in pyTenjin distribution.)


Installation:

   $ easy_install Tenjin
   ## or download, extract, and execute 'setup.py'


Example: template.pyhtml

   <h1>${title}</h1>
   <ul>
   <?py for item in items: ?>
     <li>${item}
         #{item}</li>
   <?py #end ?>
   </ul>

Example: main.py

   import tenjin
   from tenjin.helpers import to_str, escape
   engine = tenjin.Engine()
   context = { 'title': 'pyTenjin Example',
               'items': ['<AAA>', 'B&B', '"CCC"'] }
   output = engine.render('template.pyhtml', context)
   print output,

Example: result

   $ python main.py
   <h1>pyTenjin Example</h1>
   <ul>
     <li>&lt;AAA&gt;
         <AAA></li>
     <li>B&amp;B
         B&B</li>
     <li>&quot;CCC&quot;
         "CCC"</li>
   </ul>


See user's guide and examples at the above page for details.
New release of pyTenjin will be informed at:
http://www.kuwata-lab.com/support/


Release 0.6.2:

[Changes]

  * When '-S', '-a retrieve', '-X', or '-a statements' specified,
    pytenjin command replaces text before expressions into spaces
    and print it.

[Bugfix]

  * pytenjin command printed "\n\n" instead of "\n" when '-U' specified.
    Fixed to print "\n".


--
regards,
makoto kuwata

.######################################################################

.$ [ANN] pyTenjin 0.6.1 - a fast and full-featured template engine

I have released Tenjin 0.6.1.
http://www.kuwata-lab.com/tenjin/
In this release, benchmark script is enhanced to support
Genshi, Mako, and Templetor.

Tenjin is a very fast and full-featured temlate engine.
You can embed Python statements and expressions into your text file.
Tenjin converts it into Python program and evaluate it.

How fast Tenjin is? It is about:
* three times faster than Cheetah and Myghty
* nine times faster than Django
* sixty times faster than Kid
* twice faster than Mako
You can see the detail of benchmark at:
http://www.kuwata-lab.com/tenjin/
(benchmark script is included in Tenjin distribution.)

Tenjin is not only so fast and lightweight but also full-featured.
It supports:
* layout template
* partial template
* capturing
* preprocessing
* and so on...

See user's guide and examples at the above page for details.
New release of Tenjin will be informed at:
http://www.kuwata-lab.com/support/


Release 0.6.1:

[Enhancements]

  * Benchmark script ('benchmark/bench.py') is rewrited.
  * Benchmark supports Genshi, Mako, and Templetor.
  * Add examples.

[Bugfix]

  * Typo in User's Guide is fixed.


--
makoto kuwata

.######################################################################

.$ [ANN] pyTenjin 0.6.0 - a fast and full-featured template engine

I have Released pyTenjin 0.6.0.
http://www.kuwata-lab.com/tenjin/
This is a first release of pyTenjin.

pyTenjin is a very fast and full-featured temlate engine based on
embedded Python.
You can embed Python statements and expressions into your text file.
pyTenjin converts it into Python program and evaluate it.

Features:
* Very fast (three times faster than Cheetah, nine times faster than Djano).
* Lightweight (only one file which contains about 1000 lines)
* Not break HTML design because it uses XML Processing
  Instructions (PI) as embedded notation for Python statements.
* Secure because it supports escaping expression value by default.
* Auto caching of converted Python code.
* Nestable layout template
* Inlucde other templates
* Capture part of template
* Load YAML file as context data
* Preprocessing support

See user's guide and examples at the above page.

--
regards
kwatch
